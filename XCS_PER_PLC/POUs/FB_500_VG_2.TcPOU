<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.14">
  <POU Name="FB_500_VG_2" Id="{1ea31f1f-81df-4891-bbfa-9e2518b65024}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_500_VG_2

VAR_IN_OUT
    IG : ST_VG;
END_VAR

VAR_INPUT
    PG	:	ST_VG;
END_VAR

VAR_OUTPUT
    xHV_SW: BOOL;
    rPRESS: INT;
    rVAC_SP: INT;
END_VAR

VAR
	bInit			: BOOL := TRUE;
    rV 				: REAL;
    GaugeTurnOnTmr 	: TON;
	tStartupTimer	: TON;
END_VAR

VAR CONSTANT
    //cDefaultPressure : REAL := 750.0;
    //vBase	:	REAL := 0; //corresponding vbase 0V based on default curve.  See manual pg. 44
    //pBase	:	REAL := 1.0E-10; //default curve base pressure is 1E-10. Confusing since can't actually read that low using analog out.
    //vSlope	:	REAL := 1.0; //looks correct for default curve
	
	// Ranges have to match the configurator software
	pBase 			 : REAL := 1.0E-10;//default curve base pressure is 1E-10. Confusing since can't actually read that low using analog out.
	vBase 			 : REAL := 1;
	vDisconnected 	 : REAL := 0.5;
	vSlope 			 : REAL := 1.0; 
	vGaugeOff		 : REAL := 9.8;
	vNoDischarge	 : REAL := 9.3;
	MinPressure		 : REAL := 1E-10;
	cDefaultPressure : REAL := 0;
	rDeadband 		 : REAL := 0.3;
	iTermBits		 : UINT := 32767; // The terminal's maximum value in bits
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (bInit) THEN
	tStartupTimer.IN:=TRUE;
	bInit :=FALSE;
END_IF

tStartupTimer(PT:=T#3S);

(* 500 Logarithmic Output Conversion, factory default configuration *)
rV := 10*INT_TO_REAL(IG.iPRESS_R)/iTermBits;

(* Set Guage State based on the Analog voltage*)
IF  NOT (tStartupTimer.Q) THEN // Give time for the gauge controller to start
	IG.eState := Off;
	IG.rPRESS := cDefaultPressure;
ELSIF rV < vDisconnected THEN
	IG.eState := GaugeDisconnected;
	IG.rPRESS := cDefaultPressure;
ELSIF rV >= vDisconnected AND rV < (vNoDischarge -rDeadband)  AND (IG.xHV_SW) THEN
	IG.eState := Valid;
	IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
ELSIF rV >= (vNoDischarge -rDeadband) AND rV <(vGaugeOff -rDeadband) AND (IG.xHV_SW)  THEN
	IG.eState := Starting;
	IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
ELSIF rV >= (vGaugeOff -rDeadband) THEN
	IG.eState := Off;
	//IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
	IG.rPRESS := cDefaultPressure;
ELSIF IG.rPRESS < MinPressure THEN
	IG.eState := PressInvalid;
	//IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
	IG.rPRESS := cDefaultPressure;
END_IF

(* Ion Gauge Protection Functions *)
(* If the PG pressure is greater than the VG.PRO_SP then the gauge is disabled *)
(* If the PG pressure is less than the VG.PRO_SP then the gauge is enabled *)
(* This FB also implements some hysteresis so the gauge doesn't have rapid power cycling while near the turn on boundary *)

IF PG.rPRESS <= IG.rPRO_SP AND PG.xPRESS_OK THEN
    IG.xHV_DIS := IG.xHV_SW;
ELSIF IG.xHV_DIS THEN
    IF IG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR)  OR PG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR) THEN
        IG.xHV_DIS := FALSE;
        IG.xHV_SW  := FALSE;
    END_IF
ELSE
    IG.xHV_DIS := FALSE;
    IG.xHV_SW  := FALSE;
END_IF

(* Pressure gauge OK checks *)

GaugeTurnOnTmr(IN:=IG.xHV_DIS, PT:=T#10S, Q=>IG.xTurnOnTime);

//Backwards compatibility
IG.xPRESS_OK := (IG.eState = E_PressureState.Valid) OR IG.xBAKEOUT;

(* Setpoint evaluation *)
IG.xAT_VAC := (IG.xPRESS_OK AND (IG.rPRESS < IG.rVAC_SP)) OR IG.xBAKEOUT;

]]></ST>
    </Implementation>
    <LineIds Name="FB_500_VG_2">
      <LineId Id="4" Count="2" />
      <LineId Id="104" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="7" Count="54" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>